import os
import json
import requests
from flask import Flask, request, jsonify
from datetime import datetime
import logging

# Configura√ß√£o de logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Configura√ß√µes do Uazapi (ser√£o definidas como vari√°veis de ambiente no Render)
UAZAPI_INSTANCE_ID = os.getenv('UAZAPI_INSTANCE_ID', 'YOUR_INSTANCE_ID')
UAZAPI_INSTANCE_TOKEN = os.getenv('UAZAPI_INSTANCE_TOKEN', 'YOUR_TOKEN')
UAZAPI_BASE_URL = os.getenv('UAZAPI_BASE_URL', 'https://api.uazapi.com/api')

# Links e configura√ß√µes
PLAYSTORE_LINK = "https://play.google.com/store/apps/details?id=com.taxis99"
APPSTORE_LINK = "https://apps.apple.com/br/app/99-carros/id553663691"
VIDEO_TUTORIAL_URL = "https://exemplo.com/video-tutorial.mp4"  # Substitua pelo link real do v√≠deo
GRUPO_OFERTAS_LINK = "https://chat.whatsapp.com/XXXXXXXXX"  # Substitua pelo link real do grupo

# Armazenamento tempor√°rio de estados de conversa (em produ√ß√£o, use um banco de dados)
user_states = {}

class ChatbotFlow:
    STATES = {
        'INITIAL': 'initial',
        'WAITING_APP_RESPONSE': 'waiting_app_response',
        'WAITING_CUPOM_RESPONSE': 'waiting_cupom_response',
        'WAITING_TUTORIAL_FEEDBACK': 'waiting_tutorial_feedback',
        'COMPLETED': 'completed'
    }

class UazapiClient:
    def __init__(self, instance_id, token, base_url):
        self.instance_id = instance_id
        self.token = token
        self.base_url = base_url
        self.headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Bearer {token}'
        }
    
    def send_text(self, to, message):
        """Envia mensagem de texto"""
        url = f"{self.base_url}/{self.instance_id}/messages/send"
        payload = {
            "to": to,
            "body": message,
            "type": "text"
        }
        try:
            response = requests.post(url, json=payload, headers=self.headers)
            response.raise_for_status()
            logger.info(f"Mensagem enviada para {to}")
            return response.json()
        except Exception as e:
            logger.error(f"Erro ao enviar mensagem: {e}")
            return None
    
    def send_media(self, to, media_url, caption, media_type="video"):
        """Envia m√≠dia (v√≠deo ou imagem)"""
        url = f"{self.base_url}/{self.instance_id}/messages/send"
        payload = {
            "to": to,
            "media_url": media_url,
            "caption": caption,
            "type": media_type
        }
        try:
            response = requests.post(url, json=payload, headers=self.headers)
            response.raise_for_status()
            logger.info(f"M√≠dia enviada para {to}")
            return response.json()
        except Exception as e:
            logger.error(f"Erro ao enviar m√≠dia: {e}")
            return None
    
    def send_buttons(self, to, message, buttons):
        """Envia mensagem com bot√µes"""
        url = f"{self.base_url}/{self.instance_id}/messages/send"
        payload = {
            "to": to,
            "body": message,
            "type": "buttons",
            "buttons": buttons
        }
        try:
            response = requests.post(url, json=payload, headers=self.headers)
            response.raise_for_status()
            logger.info(f"Bot√µes enviados para {to}")
            return response.json()
        except Exception as e:
            logger.error(f"Erro ao enviar bot√µes: {e}")
            return None

# Inicializa cliente Uazapi
uazapi = UazapiClient(UAZAPI_INSTANCE_ID, UAZAPI_INSTANCE_TOKEN, UAZAPI_BASE_URL)

def get_user_state(user_id):
    """Obt√©m o estado atual do usu√°rio"""
    return user_states.get(user_id, {
        'state': ChatbotFlow.STATES['INITIAL'],
        'data': {}
    })

def update_user_state(user_id, state, data=None):
    """Atualiza o estado do usu√°rio"""
    if user_id not in user_states:
        user_states[user_id] = {'state': state, 'data': {}}
    else:
        user_states[user_id]['state'] = state
    
    if data:
        user_states[user_id]['data'].update(data)
    
    logger.info(f"Estado atualizado para {user_id}: {state}")

def process_message(sender, message_text):
    """Processa a mensagem recebida e responde de acordo com o fluxo"""
    user_state = get_user_state(sender)
    current_state = user_state['state']
    message_lower = message_text.lower().strip()
    
    # Estado inicial - Pergunta sobre o app
    if current_state == ChatbotFlow.STATES['INITIAL']:
        welcome_msg = ("üéØ Ol√°! Seja bem-vindo(a)!\n\n"
                      "Vou te ajudar a economizar com a 99! üöóüí∞\n\n"
                      "Primeiro, me conta: *Voc√™ j√° tem o app da 99 instalado no seu celular?*\n\n"
                      "Responda com:\n"
                      "‚úÖ *SIM* - se j√° tem o app\n"
                      "‚ùå *N√ÉO* - se ainda n√£o tem")
        
        uazapi.send_text(sender, welcome_msg)
        update_user_state(sender, ChatbotFlow.STATES['WAITING_APP_RESPONSE'])
    
    # Aguardando resposta sobre ter o app
    elif current_state == ChatbotFlow.STATES['WAITING_APP_RESPONSE']:
        if any(word in message_lower for word in ['sim', 'tenho', 'j√° tenho', 's', 'yes', 'claro']):
            # Usu√°rio tem o app - pergunta sobre cupom
            cupom_msg = ("√ìtimo! üéâ\n\n"
                        "Agora me conta: *Voc√™ j√° usou algum cupom de desconto na 99?*\n\n"
                        "Responda com:\n"
                        "‚úÖ *J√Å USEI* - se j√° utilizou cupom\n"
                        "‚ùå *NUNCA USEI* - se nunca utilizou")
            
            uazapi.send_text(sender, cupom_msg)
            update_user_state(sender, ChatbotFlow.STATES['WAITING_CUPOM_RESPONSE'])
        
        elif any(word in message_lower for word in ['n√£o', 'nao', 'n', 'no', 'nunca', 'ainda n√£o']):
            # Usu√°rio n√£o tem o app - envia links
            links_msg = ("üì± Sem problemas! Vamos resolver isso agora!\n\n"
                        "Baixe o app da 99 atrav√©s dos links abaixo:\n\n"
                        f"üì± *Android (Play Store):*\n{PLAYSTORE_LINK}\n\n"
                        f"üçé *iPhone (App Store):*\n{APPSTORE_LINK}\n\n"
                        "Depois de instalar, volte aqui que eu te ensino a economizar! üí∞")
            
            uazapi.send_text(sender, links_msg)
            
            # Aguarda um tempo e pergunta novamente
            followup_msg = "J√° instalou o app? Me avise quando estiver pronto! üòä"
            uazapi.send_text(sender, followup_msg)
            update_user_state(sender, ChatbotFlow.STATES['WAITING_APP_RESPONSE'])
        
        else:
            # Resposta n√£o reconhecida
            retry_msg = ("Desculpe, n√£o entendi sua resposta. ü§î\n\n"
                        "Por favor, responda com *SIM* ou *N√ÉO*:\n"
                        "Voc√™ j√° tem o app da 99 instalado?")
            uazapi.send_text(sender, retry_msg)
    
    # Aguardando resposta sobre cupom
    elif current_state == ChatbotFlow.STATES['WAITING_CUPOM_RESPONSE']:
        if any(word in message_lower for word in ['nunca', 'n√£o', 'nao', 'n', 'ainda n√£o', 'nunca usei']):
            # Nunca usou cupom - envia tutorial
            tutorial_msg = ("üé¨ Perfeito! Vou te ensinar como usar cupons de desconto!\n\n"
                          "Assista este v√≠deo tutorial r√°pido e pr√°tico:")
            
            uazapi.send_text(sender, tutorial_msg)
            
            # Envia o v√≠deo
            video_caption = "üìπ Tutorial: Como usar cupons de desconto na 99"
            uazapi.send_media(sender, VIDEO_TUTORIAL_URL, video_caption, "video")
            
            # Pergunta se deu certo
            feedback_msg = ("Depois de assistir o v√≠deo e aplicar o cupom...\n\n"
                           "*Conseguiu utilizar o cupom com sucesso?* üéØ\n\n"
                           "Responda com:\n"
                           "‚úÖ *SIM* - consegui usar!\n"
                           "‚ùå *N√ÉO* - tive problemas")
            
            uazapi.send_text(sender, feedback_msg)
            update_user_state(sender, ChatbotFlow.STATES['WAITING_TUTORIAL_FEEDBACK'])
        
        elif any(word in message_lower for word in ['sim', 'j√°', 'ja', 's', 'usei', 'j√° usei']):
            # J√° usou cupom - mensagem de sucesso
            success_msg = ("üëè Parab√©ns! Voc√™ j√° est√° economizando!\n\n"
                          "Mas n√£o para por a√≠! Temos muito mais ofertas esperando por voc√™! üéÅ\n\n"
                          f"*Entre no nosso grupo VIP de ofertas:*\n{GRUPO_OFERTAS_LINK}\n\n"
                          "No grupo voc√™ recebe:\n"
                          "‚úÖ Cupons exclusivos diariamente\n"
                          "‚úÖ Promo√ß√µes antecipadas\n"
                          "‚úÖ Dicas para economizar ainda mais\n\n"
                          "Te vejo l√°! üöÄ")
            
            uazapi.send_text(sender, success_msg)
            update_user_state(sender, ChatbotFlow.STATES['COMPLETED'])
        
        else:
            # Resposta n√£o reconhecida
            retry_msg = ("Desculpe, n√£o entendi. ü§î\n\n"
                        "Voc√™ j√° usou algum cupom de desconto na 99?\n"
                        "Responda com *J√Å USEI* ou *NUNCA USEI*")
            uazapi.send_text(sender, retry_msg)
    
    # Aguardando feedback do tutorial
    elif current_state == ChatbotFlow.STATES['WAITING_TUTORIAL_FEEDBACK']:
        if any(word in message_lower for word in ['sim', 'consegui', 'deu certo', 's', 'funcionou']):
            # Tutorial funcionou - envia link do grupo
            congrats_msg = ("üéâ Excelente! Fico feliz que tenha conseguido!\n\n"
                          "Agora voc√™ j√° sabe economizar! Mas isso √© s√≥ o come√ßo...\n\n"
                          f"*Entre no nosso grupo VIP de ofertas:*\n{GRUPO_OFERTAS_LINK}\n\n"
                          "Benef√≠cios do grupo:\n"
                          "üéÅ Cupons exclusivos todos os dias\n"
                          "üí∞ Economize at√© 50% nas corridas\n"
                          "üî• Promo√ß√µes em primeira m√£o\n"
                          "üë• Comunidade de economia compartilhada\n\n"
                          "Nos vemos l√°! üöÄ")
            
            uazapi.send_text(sender, congrats_msg)
            update_user_state(sender, ChatbotFlow.STATES['COMPLETED'])
        
        elif any(word in message_lower for word in ['n√£o', 'nao', 'n', 'problema', 'erro', 'n√£o consegui']):
            # Teve problemas - oferece ajuda
            help_msg = ("üòî Poxa, vamos resolver isso!\n\n"
                       "Tente seguir estes passos:\n\n"
                       "1Ô∏è‚É£ Abra o app da 99\n"
                       "2Ô∏è‚É£ Toque no menu (‚â°)\n"
                       "3Ô∏è‚É£ Selecione 'Cupons'\n"
                       "4Ô∏è‚É£ Digite o c√≥digo do cupom\n"
                       "5Ô∏è‚É£ Toque em 'Aplicar'\n\n"
                       "Se ainda tiver problemas, entre em contato com o suporte da 99.\n\n"
                       "Conseguiu agora? Responda *SIM* ou *N√ÉO*")
            
            uazapi.send_text(sender, help_msg)
        
        else:
            # Resposta n√£o reconhecida
            retry_msg = ("Por favor, me diga:\n"
                        "Conseguiu usar o cupom depois de assistir o tutorial?\n"
                        "Responda com *SIM* ou *N√ÉO*")
            uazapi.send_text(sender, retry_msg)
    
    # Estado completo - reinicia conversa se necess√°rio
    elif current_state == ChatbotFlow.STATES['COMPLETED']:
        restart_msg = ("Ol√° novamente! üòä\n\n"
                      "J√° estou te ajudando com os cupons da 99.\n"
                      f"N√£o esque√ßa de entrar no grupo: {GRUPO_OFERTAS_LINK}\n\n"
                      "Precisa de mais alguma coisa?")
        uazapi.send_text(sender, restart_msg)

@app.route('/webhook', methods=['POST'])
def webhook():
    """Endpoint do webhook que recebe as mensagens do Uazapi"""
    try:
        data = request.json
        logger.info(f"Webhook recebido: {json.dumps(data, indent=2)}")
        
        # Verifica se √© uma mensagem recebida
        if data.get('event') == 'messages.upsert':
            messages = data.get('data', {}).get('messages', [])
            
            for msg in messages:
                # Processa apenas mensagens de texto recebidas
                if msg.get('type') == 'text' and not msg.get('fromMe'):
                    sender = msg.get('from')
                    message_text = msg.get('body', '')
                    
                    logger.info(f"Mensagem de {sender}: {message_text}")
                    
                    # Processa a mensagem
                    process_message(sender, message_text)
        
        return jsonify({'status': 'success'}), 200
    
    except Exception as e:
        logger.error(f"Erro no webhook: {e}")
        return jsonify({'status': 'error', 'message': str(e)}), 500

@app.route('/health', methods=['GET'])
def health():
    """Endpoint de health check para o Render"""
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'instance_id': UAZAPI_INSTANCE_ID
    }), 200

@app.route('/', methods=['GET'])
def home():
    """P√°gina inicial"""
    return jsonify({
        'message': 'Bot WhatsApp 99 - Uazapi',
        'status': 'running',
        'endpoints': {
            'webhook': '/webhook',
            'health': '/health'
        }
    }), 200

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port, debug=False)